"use strict";
/*
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *       DO NOT EDIT THIS FILE
 *       For FCC testing purposes!
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var analyser = require('./assertion-analyser');
var EventEmitter = require('events').EventEmitter;
const fs = require("fs");
var MochaClass = require('mocha'), path = require('path');
var mochaInstance = new MochaClass();
var testDir = './tests';
// Add each .js file to the mocha instance
fs.readdirSync(path.join(__dirname, testDir))
    .filter(function (file) {
    // Only keep the .js files
    return file.substr(-3) === '.js';
})
    .forEach(function (file) {
    mochaInstance.addFile(path.join(__dirname, testDir, file));
});
var emitter = new EventEmitter();
emitter.run = function () {
    var tests = [];
    var context = '';
    var separator = ' -> ';
    // Run the tests.
    try {
        var runner = mochaInstance
            .ui('tdd')
            .run()
            .on('test end', function (test) {
            // remove comments
            var body = test.body.replace(/\/\/.*\n|\/\*.*\*\//g, '');
            // collapse spaces
            body = body.replace(/\s+/g, ' ');
            var obj = {
                title: test.title,
                context: context.slice(0, -separator.length),
                state: test.state,
                // body: body,
                assertions: analyser(body)
            };
            tests.push(obj);
        })
            .on('end', function () {
            emitter.report = tests;
            emitter.emit('done', tests);
        })
            .on('suite', function (s) {
            context += s.title + separator;
        })
            .on('suite end', function (s) {
            context = context.slice(0, -(s.title.length + separator.length));
        });
    }
    catch (e) {
        throw e;
    }
};
module.exports = emitter;
/*
 * Mocha.runner Events:
 * can be used to build a better custom report
 *
 *   - `start`  execution started
 *   - `end`  execution complete
 *   - `suite`  (suite) test suite execution started
 *   - `suite end`  (suite) all tests (and sub-suites) have finished
 *   - `test`  (test) test execution started
 *   - `test end`  (test) test completed
 *   - `hook`  (hook) hook execution started
 *   - `hook end`  (hook) hook complete
 *   - `pass`  (test) test passed
 *   - `fail`  (test, err) test failed
 *   - `pending`  (test) test pending
 */
//# sourceMappingURL=test-runner.js.map